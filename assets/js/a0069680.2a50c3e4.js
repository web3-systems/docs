"use strict";(self.webpackChunk_web3_systems_docs=self.webpackChunk_web3_systems_docs||[]).push([[4306],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9833:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={},l="Multichain Database",c={unversionedId:"multichain-providers/index",id:"multichain-providers/index",title:"Multichain Database",description:"CI",source:"@site/docs/multichain-providers/index.md",sourceDirName:"multichain-providers",slug:"/multichain-providers/",permalink:"/multichain-providers/",editUrl:"https://github.com/web3-systems/docs/tree/main/docs/multichain-providers/index.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"What Is Web3 Systems?",permalink:"/introduction"},next:{title:"@web3-systems/multichain-providers",permalink:"/multichain-providers/modules"}},p=[{value:"\ud83d\udcbe Installation",id:"-installation",children:[],level:3},{value:"\ud83c\udfce\ufe0f \xa0Quickstart",id:"\ufe0f-quickstart",children:[],level:3},{value:"Connect New Provider",id:"connect-new-provider",children:[],level:2},{value:"Get Balance",id:"get-balance",children:[],level:2},{value:"Get Provider",id:"get-provider",children:[],level:2},{value:"Get Transaction History using EtherscanProvider",id:"get-transaction-history-using-etherscanprovider",children:[{value:"\ud83d\udcd6 \xa0Overview",id:"-overview",children:[],level:3},{value:"\ud83e\udde9 \xa0Examples",id:"-examples",children:[],level:3},{value:"\ud83d\udcbb \xa0Developer Experience",id:"-developer-experience",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multichain-database"},"Multichain Database"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/web3-systems/multichain-providers/actions/workflows/main.yml/badge.svg",alt:"CI"}),"\n",(0,a.kt)("img",{parentName:"p",src:"https://badgen.net/badge/-/TypeScript?icon=typescript&label&labelColor=blue&color=555555",alt:"TS"}),"\n",(0,a.kt)("a",{parentName:"p",href:"http://perso.crans.org/besson/LICENSE.html"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/License-MIT-blue.svg",alt:"GPLv3 license"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://npmjs.org/package/@web3-systems/multichain-providers"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@web3-systems/multichain-providers.svg",alt:"Version"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://npmjs.org/package/@web3-systems/multichain-providers"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/dw/@web3-systems/multichain-providers.svg",alt:"Downloads/week"}))),(0,a.kt)("h3",{id:"-installation"},"\ud83d\udcbe Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @web3-systems/multichain-providers\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @web3-systems/multichain-providers\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/web3-systems/multichain-providers\n")),(0,a.kt)("h3",{id:"\ufe0f-quickstart"},"\ud83c\udfce\ufe0f ","\xa0","Quickstart"),(0,a.kt)("p",null,"The MultichainProvider class wraps the ",(0,a.kt)("inlineCode",{parentName:"p"},"@ethersproject/providers")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Provider")," class."),(0,a.kt)("p",null,"Updating function signatures with ",(0,a.kt)("inlineCode",{parentName:"p"},"chainId")," to specify a target network."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"provider.getBalance('0x000.0000')")," "),(0,a.kt)("p",null,"is now... "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"multiprovider.getBalance('0x000.0000', 1);")),(0,a.kt)("p",null,"The function signature (as you can see) now consumes ",(0,a.kt)("inlineCode",{parentName:"p"},"chainId")," in the first argument position. If a provider has been configured for the chainId the provider will be used when fetching the balance."),(0,a.kt)("h2",{id:"connect-new-provider"},"Connect New Provider"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MultichainProviders } from '@web3-systems/multichain-providers';\nlet client = new MultichainProviders(); // by default connect to Ethereum mainnet via Infura\nlet jsonRpcURL = 'localhost:8545'\nclient.connect(1, jsonRpcURL); // sets chainId to use localhost as the endpoint \n")),(0,a.kt)("h2",{id:"get-balance"},"Get Balance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { BigNumber } from '@ethersproject/bignumber';\nimport { MultichainProviders } from '@web3-systems/multichain-providers';\nconst client = new MultichainProviders();\nconst balance:BigNumber = await client.getBalance('0x000...000', 1);\n")),(0,a.kt)("h2",{id:"get-provider"},"Get Provider"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Provider } from '@ethersproject/providers';\nimport { MultichainProviders } from '@web3-systems/multichain-providers';\nconst client = new MultichainProviders();\nconst provider:Provider = await client.getProvider(1);\n")),(0,a.kt)("h2",{id:"get-transaction-history-using-etherscanprovider"},"Get Transaction History using EtherscanProvider"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Transactions } from '@ethersproject/contracts';\nimport { MultichainProviders } from '@web3-systems/multichain-providers';\nlet apikey = 'etherscan/polygonscan/snowtrace-apikey'\nlet client = new MultichainProviders(1, apikey, 'chainscan');\nconst transactions: Transactions[] = await client.getTransactions('0x000...000', 1);\n")),(0,a.kt)("h3",{id:"-overview"},"\ud83d\udcd6 ","\xa0","Overview"),(0,a.kt)("p",null,"Coming soon..."),(0,a.kt)("h3",{id:"-examples"},"\ud83e\udde9 ","\xa0","Examples"),(0,a.kt)("h1",{id:"utlity-functions"},(0,a.kt)("strong",{parentName:"h1"},"Utlity Functions")),(0,a.kt)("p",null,"Utility functions like ",(0,a.kt)("inlineCode",{parentName:"p"},"getTransactions")," (specific to Etherscan) and ",(0,a.kt)("inlineCode",{parentName:"p"},"getLogsDecoded")," have been included to simplify common method chaining and developer objectives."),(0,a.kt)("p",null,"For example, instead of fetching event logs and decoding separately, a single function can be called."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const events = await client.getLogsDecoded(1,filter,contract,fragment);\n/*\n[\n    {\n        log: {...},\n        parsed: {...}\n    },\n    {\n        log: {...},\n        parsed: {...}\n    },\n]\n*/\n")),(0,a.kt)("h3",{id:"-developer-experience"},"\ud83d\udcbb ","\xa0","Developer Experience"),(0,a.kt)("p",null,"The package is setup using the ",(0,a.kt)("a",{parentName:"p",href:"https://tsdx.io/"},"TSDX zero-config CLI")," which includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Typescript"),(0,a.kt)("li",{parentName:"ul"},"Rollup"),(0,a.kt)("li",{parentName:"ul"},"Jest"),(0,a.kt)("li",{parentName:"ul"},"Prettier"),(0,a.kt)("li",{parentName:"ul"},"ESLint")))}d.isMDXComponent=!0}}]);